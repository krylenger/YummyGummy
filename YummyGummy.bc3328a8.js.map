{"version":3,"sources":["utils.js","index.js"],"names":["getSearchRecipeUrl","searchedWord","getUrlOfDetailedRecipe","id","appRoot","document","getElementById","getNutrientAmount","nutrientName","arrayOfAllNutrients","searchedNutrient","find","nutrient","name","amount","calculateMaxCalories","currentGoal","usersWeight","caloriesAmount","parseInt","GetMealPlanByGoal","styles","getMealPlanByGoal","SetGoal","RenderDailyMealPlan","FillFridge","getRecipeByIngredientsHeader","AddFridgeIngredients","RenderFridgeIngredients","GetRecipeByIngredients","getRecipeByIngredientsContainer","RenderFridgeRecipes","SearchForRecipesByName","searchForRecipeByNameContainer","SearchRecipes","RenderRecipes","setCurrentGoal","value","window","dataStore","renderApp","GoalSwitch","goal","map","join","getMealPlanByGoalHeader","getDailyMealPlan","loadDailyMealPlan","then","meals","nutrients","loadDetailedRecipesInfo","results","maxCalories","fetch","method","headers","response","json","data","dailyMealPlan","catch","err","finally","detailedMealPlanRecipes","content","contentDescription","calories","protein","fat","carbohydrates","title","length","detailedRecipeCardData","RecipeCard","getPreparedRecipeCardData","RenderDailyMealPlanContainer","mealDescription","FillFridgeOnChangeCB","magicFridgeItems","push","alert","loadMagicFridgeRecipes","ingredientsArray","ingredientsQueryString","reduce","final","current","concat","magicFridgeRecipes","confirmButtonCB","isMagicFridge","confirmButton","fridgeItem","magicFridgeDetailedRecipes","image","isCurrentRecipeInCache","recipesInCache","searchedRecipe","Boolean","whereToLoad","requests","result","url","Promise","all","responses","r","error","validateAndLoadData","resolve","performSearchRecipes","recipeName","isDataLoading","detailedRecipesInfo","instructions","readyInMinutes","nutrition","fatAmount","carbohydratesAmount","proteinAmount","recipeCard","innerHTML","App","appContainer","header","module","hot","accept"],"mappings":"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","file":"YummyGummy.bc3328a8.js","sourceRoot":"..","sourcesContent":["export function getSearchRecipeUrl(searchedWord) {\n  return `https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/search?query=${searchedWord}&number=2`;\n}\n\nexport function getUrlOfDetailedRecipe(id) {\n  return `https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/${id}/information?includeNutrition=true`;\n}\n","// Start from here\nimport { getSearchRecipeUrl, getUrlOfDetailedRecipe } from './utils';\nimport styles from './style';\n\nconst appRoot = document.getElementById('app-root');\n\nwindow.renderApp = renderApp;\nwindow.FillFridgeOnChangeCB = FillFridgeOnChangeCB;\nwindow.confirmButtonCB = confirmButtonCB;\nwindow.performSearchRecipes = performSearchRecipes;\nwindow.validateAndLoadData = validateAndLoadData;\nwindow.getDailyMealPlan = getDailyMealPlan;\n\nwindow.dataStore = {\n  recipesInCache: [],\n  currentGoal: 'lose',\n  magicFridgeItems: [],\n  usersWeight: '22',\n  searchedRecipe: '',\n  detailedRecipesInfo: [],\n  detailedMealPlanRecipes: [],\n  magicFridgeRecipes: [],\n  magicFridgeDetailedRecipes: [],\n  isMagicFridge: false,\n  isDataLoading: false,\n  error: null,\n  dailyMealPlan: '',\n};\n\nif (module.hot) {\n  module.hot.accept();\n}\n\nfunction getNutrientAmount(nutrientName, arrayOfAllNutrients) {\n  let searchedNutrient = arrayOfAllNutrients.find(nutrient => nutrient.name === nutrientName);\n  return searchedNutrient.amount;\n}\n\nfunction calculateMaxCalories(currentGoal, usersWeight) {\n  usersWeight = parseInt(usersWeight);\n  let caloriesAmount;\n\n  if (currentGoal === 'lose') {\n    if (usersWeight <= 50) {\n      caloriesAmount = usersWeight * 10 + 1200 - 200;\n    } else if (usersWeight > 50 && usersWeight <= 80) {\n      caloriesAmount = usersWeight * 10 + 1400 - 200;\n    } else if (usersWeight > 80 && usersWeight <= 110) {\n      caloriesAmount = usersWeight * 10 + 1600 - 200;\n    } else {\n      caloriesAmount = usersWeight * 10 + 1800 - 200;\n    }\n  } else {\n    if (usersWeight <= 50) {\n      caloriesAmount = usersWeight * 10 + 1200;\n    } else if (usersWeight > 50 && usersWeight <= 80) {\n      caloriesAmount = usersWeight * 10 + 1400;\n    } else if (usersWeight > 80 && usersWeight <= 110) {\n      caloriesAmount = usersWeight * 10 + 1600;\n    } else {\n      caloriesAmount = usersWeight * 10 + 1800;\n    }\n  }\n  return caloriesAmount;\n}\n\nfunction GetMealPlanByGoal() {\n  return `<div class=\"${styles.getMealPlanByGoal}\">\n    ${SetGoal()}\n    ${RenderDailyMealPlan()}\n  </div>`;\n}\n\nfunction FillFridge() {\n  return `<div class=\"${styles.getRecipeByIngredientsHeader}\">\n    ${AddFridgeIngredients()}\n    ${RenderFridgeIngredients()}\n  </div>`;\n}\n\nfunction GetRecipeByIngredients() {\n  return `<div class=\"${styles.getRecipeByIngredientsContainer}\">\n    \n    ${FillFridge()}\n    ${RenderFridgeRecipes()}\n  </div>`;\n}\n\nfunction SearchForRecipesByName() {\n  return `<div class=\"${styles.searchForRecipeByNameContainer}\">\n    ${SearchRecipes()}\n    ${RenderRecipes()}\n  </div>`;\n}\n\nfunction setCurrentGoal(value) {\n  window.dataStore.currentGoal = value;\n  window.renderApp();\n}\n\nfunction GoalSwitch(currentGoal, setCurrentGoal) {\n  return `\n    ${[\n      { id: 'goalGain', goal: 'gain' },\n      { id: 'goalLose', goal: 'lose' },\n    ]\n      .map(\n        ({ goal, id }) => `\n      <input \n        id=\"${id}\" \n        type=\"radio\" \n        value=\"${goal}\"\n        ${currentGoal === goal ? 'checked' : ''}\n        onchange=\"(${setCurrentGoal})(this.value);\"\n       />\n      <label for=\"${id}\">${goal}</label>  \n    `,\n      )\n      .join('')}`;\n}\n\nfunction SetGoal() {\n  const { currentGoal, usersWeight } = window.dataStore;\n  return `<div class=\"${styles.getMealPlanByGoalHeader}\">\n    <h2>Do you want to lose or to gain weight?</h2>\n    ${GoalSwitch(currentGoal, setCurrentGoal)}\n    <p>In case you want to lose weight, we're going to create a meal plan with a decreased amount of carbs.</p>\n    <p>If your goal is to gain muscles - we're going to include more high protein dishes.\n    <h4>What's your weight?</h4>\n    <input type=\"number\" value=\"${usersWeight}\" placeholder=\"your weight\" onchange=\"window.dataStore.usersWeight = this.value; window.renderApp();\">\n    <button onclick=\"window.getDailyMealPlan()\">Submit</button>\n  </div>`;\n}\n\nfunction getDailyMealPlan() {\n  let promise = loadDailyMealPlan();\n  promise.then(({ meals, nutrients }) => {\n    loadDetailedRecipesInfo({ results: meals }, 'detailedMealPlanRecipes');\n  });\n}\n\nfunction loadDailyMealPlan() {\n  const { currentGoal, usersWeight } = window.dataStore;\n\n  const maxCalories = calculateMaxCalories(currentGoal, usersWeight);\n\n  return fetch(\n    `https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/mealplans/generate?timeFrame=day&targetCalories=${maxCalories}`,\n    {\n      method: 'GET',\n      headers: {\n        'x-rapidapi-key': '46c316dbf2msh22acfa650b43ca2p1df703jsnc4386fc8ea30',\n        'x-rapidapi-host': 'spoonacular-recipe-food-nutrition-v1.p.rapidapi.com',\n      },\n    },\n  )\n    .then(response => response.json())\n    .then(data => {\n      window.dataStore.dailyMealPlan = data;\n      return data;\n    })\n    .catch(err => {\n      window.dataStore.err = err;\n    })\n    .finally(window.renderApp);\n}\n\nfunction RenderDailyMealPlan() {\n  const { dailyMealPlan, detailedMealPlanRecipes } = window.dataStore;\n  let content = 'Please set your goal.';\n  let contentDescription = '';\n  if (dailyMealPlan) {\n    const {\n      meals,\n      nutrients: { calories, protein, fat, carbohydrates },\n    } = dailyMealPlan;\n    content = meals\n      .map(({ id, title }) => `<div><div>${id}</div><div>${title}</div></div>`)\n      .join('');\n    content += `<div><p>Calories: ${calories}</p><p>protein: ${protein}</p><p>fat: ${fat}</p><p>carbohydrates: ${carbohydrates}</p></div>`;\n    contentDescription = `<h3>Meal Description</h3><div>\n    <p>Here is your daily meal plan. Enjoy it!\n    <p>Calories: ${calories}</p>\n    <p>Protein: ${protein}</p>\n    <p>Fat: ${fat}</p>\n    <p>Carbohydrates: ${carbohydrates}</p></div>`;\n  }\n\n  if (detailedMealPlanRecipes.length) {\n    const recipeCards = window.dataStore.detailedMealPlanRecipes.map(detailedRecipeCardData => {\n      const preparedRecipeCardData = getPreparedRecipeCardData(detailedRecipeCardData);\n      return RecipeCard(preparedRecipeCardData);\n    });\n    content = recipeCards.join('');\n  }\n\n  return `<div class=\"${styles.RenderDailyMealPlanContainer}\"><div class=\"${styles.mealDescription}>\">${contentDescription}</div><div>${content}</div></div>`;\n}\n\nfunction FillFridgeOnChangeCB(value) {\n  const { magicFridgeItems } = window.dataStore;\n\n  if (magicFridgeItems.length < 5) {\n    magicFridgeItems.push(value);\n    value = '';\n    window.renderApp();\n  } else {\n    alert('5 ingredients are maximum');\n  }\n}\n\nfunction AddFridgeIngredients() {\n  return `<div>\n      <h2>What's in your fridge?</h2>\n      <p>Enter up to 5 products you have in the fridge to cook the best meal. Example: apple, milk, sugar. </p>\n      <input \n        type=\"text\" \n        placeholder=\"what is in your fridge?\" \n        onchange=\"window.FillFridgeOnChangeCB(this.value)\"\n      >\n      <button type=\"submit\">+add</button>\n      \n  </div>`;\n}\n\nfunction loadMagicFridgeRecipes() {\n  const ingredientsArray = window.dataStore.magicFridgeItems;\n  let ingredientsQueryString = ingredientsArray.reduce(\n    (final, current) => final.concat(current + '%2C'),\n    '',\n  );\n  return fetch(\n    `https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/findByIngredients?ingredients=${ingredientsQueryString}&number=3&ignorePantry=false&ranking=1`,\n    {\n      method: 'GET',\n      headers: {\n        'x-rapidapi-key': '46c316dbf2msh22acfa650b43ca2p1df703jsnc4386fc8ea30',\n        'x-rapidapi-host': 'spoonacular-recipe-food-nutrition-v1.p.rapidapi.com',\n      },\n    },\n  )\n    .then(response => response.json())\n    .then(data => {\n      window.dataStore.magicFridgeRecipes = data;\n      return data;\n    })\n    .catch(err => {\n      window.dataStore.err = err;\n    })\n    .finally(window.renderApp);\n}\n\nfunction confirmButtonCB() {\n  window.dataStore.isMagicFridge = true;\n  let promise = loadMagicFridgeRecipes();\n  promise.then(data => loadDetailedRecipesInfo({ results: data }, 'magicFridgeDetailedRecipes'));\n  window.renderApp();\n}\n\nfunction RenderFridgeIngredients() {\n  let confirmButton = '';\n  if (window.dataStore.magicFridgeItems.length > 0) {\n    confirmButton = `<button onclick=\"window.confirmButtonCB()\" >Magic time!</button>`;\n  }\n  return `${window.dataStore.magicFridgeItems\n    .map(\n      fridgeItem => `<div>\n  ${fridgeItem}\n  </div>`,\n    )\n    .join('')}\n    ${confirmButton}`;\n}\n\nfunction RenderFridgeRecipes() {\n  const { isMagicFridge, magicFridgeRecipes, magicFridgeDetailedRecipes } = window.dataStore;\n  let content = '';\n  let contentDescription = '';\n  if (isMagicFridge) {\n    content = `\n      ${magicFridgeRecipes\n        .map(\n          ({ title, image }) =>\n            `<div class=\"magicFridgeRecipe\"><p>${title}</p><img src=\"${image}\" alt=\"oops\"></div>`,\n        )\n        .join('')}\n    `;\n    contentDescription = `<h3>Here we go!</h3><p>We have tried to select the best fitting recipes based on your fridge ingredients. Some ingredients may be missing so your imagination can help you how to change them and cook the best meal ever!</p>`;\n  }\n  if (magicFridgeDetailedRecipes.length) {\n    const recipeCards = window.dataStore.magicFridgeDetailedRecipes.map(detailedRecipeCardData => {\n      const preparedRecipeCardData = getPreparedRecipeCardData(detailedRecipeCardData);\n      return RecipeCard(preparedRecipeCardData);\n    });\n    content = recipeCards.join('');\n  }\n  return `<div class=\"aaa\"><div class=\"${styles.mealDescription}>\">${contentDescription}</div><div>${content}</div></div>`;\n}\n\nfunction isCurrentRecipeInCache() {\n  const { recipesInCache, searchedRecipe } = window.dataStore;\n  return Boolean(recipesInCache[searchedRecipe]);\n}\n\nfunction loadDetailedRecipesInfo({ results }, whereToLoad) {\n  const urlsOfDetailedRecipes = results.map(result => getUrlOfDetailedRecipe(result.id));\n  let requests = urlsOfDetailedRecipes.map(url =>\n    fetch(url, {\n      method: 'GET',\n      headers: {\n        'x-rapidapi-key': `${process.env.YUMMY_SPOON_API_KEY}`,\n        'x-rapidapi-host': 'spoonacular-recipe-food-nutrition-v1.p.rapidapi.com',\n      },\n    }),\n  );\n  return Promise.all(requests)\n    .then(responses => Promise.all(responses.map(r => r.json())))\n    .then(data => {\n      window.dataStore[whereToLoad] = data;\n    })\n    .catch(error => {\n      window.dataStore.error = 'Error inside loadDetailedRecipesInfo';\n    })\n    .finally(window.renderApp);\n}\n\nfunction validateAndLoadData() {\n  const { searchedRecipe } = window.dataStore;\n  const url = getSearchRecipeUrl(searchedRecipe);\n\n  if (!isCurrentRecipeInCache()) {\n    return fetch(url, {\n      method: 'GET',\n      headers: {\n        'x-rapidapi-key': `${process.env.YUMMY_SPOON_API_KEY}`,\n        'x-rapidapi-host': 'spoonacular-recipe-food-nutrition-v1.p.rapidapi.com',\n      },\n    })\n      .then(response => response.json())\n      .then(data => ({ data }));\n  }\n  return Promise.resolve({});\n}\n\nfunction performSearchRecipes(recipeName) {\n  window.dataStore.searchedRecipe = recipeName;\n  window.dataStore.error = null;\n  window.dataStore.isDataLoading = true;\n\n  window\n    .validateAndLoadData()\n    .then(({ error, data }) => {\n      window.dataStore.isDataLoading = false;\n      if (error) {\n        window.dataStore.error = error;\n      } else if (data) {\n        window.dataStore.recipesInCache[recipeName] = data;\n        loadDetailedRecipesInfo(data, 'detailedRecipesInfo');\n      }\n    })\n    .catch(err => {\n      window.dataStore.error = `Some error occurred ${err}`;\n    })\n    .finally(window.renderApp);\n}\n\nfunction SearchRecipes() {\n  const { searchedRecipe } = window.dataStore;\n  return `<div>\n    <h2>Search by recipe name</h2>\n    <input \n      type=\"text\" \n      value=\"${searchedRecipe}\" \n      placeholder=\"enter recipe (ex: rice)\" \n      onchange=\"performSearchRecipes(this.value)\"\n    />\n  </div>`;\n}\n\nfunction RenderRecipes() {\n  const {\n    searchedRecipe,\n    isDataLoading,\n    error,\n    detailedRecipesInfo,\n    recipesInCache,\n  } = window.dataStore;\n  let content = '';\n\n  //initial state\n  if (searchedRecipe === '') {\n    content = 'Please enter recipe name.';\n  } else {\n    //loading state\n    if (isDataLoading) {\n      content = 'Loading...';\n    }\n    //error state\n    if (error) {\n      content = error;\n    }\n    //results state\n    if (isCurrentRecipeInCache()) {\n      const recipeCards = window.dataStore.detailedRecipesInfo.map(detailedRecipeCardData => {\n        const preparedRecipeCardData = getPreparedRecipeCardData(detailedRecipeCardData);\n        return RecipeCard(preparedRecipeCardData);\n      });\n      content = recipeCards.join('');\n    }\n  }\n  return `<div>${content}</div>`;\n}\n\nfunction getPreparedRecipeCardData({\n  title,\n  image,\n  instructions,\n  readyInMinutes,\n  nutrition: { nutrients },\n}) {\n  const caloriesAmount = getNutrientAmount('Calories', nutrients);\n  const fatAmount = getNutrientAmount('Fat', nutrients);\n  const carbohydratesAmount = getNutrientAmount('Carbohydrates', nutrients);\n  const proteinAmount = getNutrientAmount('Protein', nutrients);\n\n  return {\n    title,\n    image,\n    instructions,\n    readyInMinutes,\n    nutrients,\n    caloriesAmount,\n    fatAmount,\n    carbohydratesAmount,\n    proteinAmount,\n  };\n}\n\nfunction RecipeCard({\n  title,\n  image,\n  instructions,\n  readyInMinutes,\n  nutrients,\n  caloriesAmount,\n  fatAmount,\n  carbohydratesAmount,\n  proteinAmount,\n}) {\n  return `<div class=\"${styles.recipeCard}\"><h1>${title}</h1>\n  <image src=\"${image}\" alt=\"${title}\"/>\n  <p>Calories: ${caloriesAmount}</p>\n  <p>Protein: ${proteinAmount}</p>\n  <p>Fat: ${fatAmount}</p>\n  <p>Carbohydrates: ${carbohydratesAmount}</p>\n  </div>`;\n}\n\nfunction renderApp() {\n  appRoot.innerHTML = App();\n}\n\nfunction App() {\n  return `<div class=\"${styles.appContainer}\" >\n    <header class=\"${styles.header}\"><h1>YummySpoon</h1></header>\n    ${GetMealPlanByGoal()}\n    ${GetRecipeByIngredients()}\n    ${SearchForRecipesByName()}\n  </div>`;\n}\n\nrenderApp();\n"]}